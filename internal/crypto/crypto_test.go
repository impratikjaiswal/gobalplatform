package crypto

import (
	"testing"

	"github.com/skythen/gobalplatform/internal/util"
)

func TestPad80(t *testing.T) {
	tests := []struct {
		name           string
		inputBytes     []byte
		inputBlocksize int
		inputForce     bool
		expected       []byte
		expectError    bool
	}{
		{
			name:           "multiple of blocksize, no force",
			inputBytes:     []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08},
			inputBlocksize: 8,
			inputForce:     false,
			expected:       []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08},
			expectError:    false,
		},
		{
			name:           "no multiple of blocksize, no force",
			inputBytes:     []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06},
			inputBlocksize: 8,
			inputForce:     false,
			expected:       []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x80, 0x00},
			expectError:    false,
		},
		{
			name:           "multiple of blocksize, force",
			inputBytes:     []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08},
			inputBlocksize: 8,
			inputForce:     true,
			expected:       []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			expectError:    false,
		},
		{
			name:           "no multiple of blocksize, force",
			inputBytes:     []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07},
			inputBlocksize: 8,
			inputForce:     true,
			expected:       []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x80},
			expectError:    false,
		},
		{
			name:           "Error: blocksize no multiple of 8",
			inputBytes:     []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07},
			inputBlocksize: 7,
			inputForce:     true,
			expected:       nil,
			expectError:    true,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			received, err := Pad80(tc.inputBytes, tc.inputBlocksize, tc.inputForce)

			util.EvaluateTestWithError(t, tc.expectError, err, tc.expected, received)
		})
	}
}

func TestMacDESFinalTDES(t *testing.T) {
	tests := []struct {
		name        string
		inputDst    *[8]byte
		inputSrc    []byte
		inputKey    [16]byte
		inputIV     [8]byte
		expected    [8]byte
		expectError bool
	}{
		{
			name:        "no offset, length equal to data length",
			inputDst:    &[8]byte{},
			inputSrc:    []byte{0x84, 0x82, 0x01, 0x00, 0x10, 0xC7, 0xB5, 0xCE, 0xE9, 0x9A, 0x93, 0x02, 0x35, 0x80, 0x00, 0x00},
			inputKey:    [16]byte{0xD1, 0xC2, 0x8C, 0x60, 0x16, 0x52, 0xA4, 0x77, 0x0D, 0x67, 0xAD, 0x82, 0xD2, 0xD2, 0xE1, 0xC4},
			inputIV:     [8]byte{},
			expected:    [8]byte{0xCC, 0x6A, 0x05, 0x06, 0xB3, 0x45, 0xC9, 0xB5},
			expectError: false,
		},
		{
			name:        "reference 1",
			inputDst:    &[8]byte{},
			inputSrc:    []byte{0x84, 0x82, 0x01, 0x00, 0x10, 0xb0, 0x0c, 0xa0, 0xdc, 0xec, 0xa1, 0x7f, 0xfc, 0x80, 0x00, 0x00},
			inputKey:    [16]byte{0xD1, 0xC2, 0x8C, 0x60, 0x16, 0x52, 0xA4, 0x77, 0x0D, 0x67, 0xAD, 0x82, 0xD2, 0xD2, 0xE1, 0xC4},
			inputIV:     [8]byte{},
			expected:    [8]byte{0x15, 0x76, 0x5d, 0x9b, 0x30, 0x8c, 0x67, 0x66},
			expectError: false,
		},
		{
			name:        "reference 2",
			inputDst:    &[8]byte{},
			inputSrc:    []byte{0x84, 0x82, 0x01, 0x00, 0x10, 0xa9, 0x68, 0x10, 0xbb, 0x21, 0xff, 0x80, 0xA3, 0x80, 0x00, 0x00},
			inputKey:    [16]byte{0xD1, 0xC2, 0x8C, 0x60, 0x16, 0x52, 0xA4, 0x77, 0x0D, 0x67, 0xAD, 0x82, 0xD2, 0xD2, 0xE1, 0xC4},
			inputIV:     [8]byte{},
			expected:    [8]byte{0xb2, 0x83, 0xf1, 0x17, 0x68, 0x7f, 0x6c, 0xe2},
			expectError: false,
		},
		{
			name:        "Error: src length not a multiple of 8",
			inputDst:    &[8]byte{},
			inputSrc:    []byte{0x84, 0x82, 0x01, 0x00, 0x10, 0xa9, 0x68, 0x10, 0xbb, 0x21, 0xff, 0x80, 0xA3, 0x80, 0x00},
			inputKey:    [16]byte{0xD1, 0xC2, 0x8C, 0x60, 0x16, 0x52, 0xA4, 0x77, 0x0D, 0x67, 0xAD, 0x82, 0xD2, 0xD2, 0xE1, 0xC4},
			inputIV:     [8]byte{},
			expected:    [8]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			expectError: true,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			err := DESFinalTDESMac(tc.inputDst, tc.inputSrc, tc.inputKey, tc.inputIV)
			received := *tc.inputDst

			util.EvaluateTestWithError(t, tc.expectError, err, tc.expected, received)
		})
	}
}
